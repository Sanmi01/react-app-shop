{"version":3,"sources":["components/DisplayShoes.js","components/shoes.js","App.js","serviceWorker.js","index.js"],"names":["Displayshoes","shoesList","shoes","map","shoe","key","id","className","Card","CardImg","width","src","image","alt","name","label","CardTitle","CardText","price","SHOES","App","props","state","Navbar","dark","color","NavbarBrand","href","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uVA0BeA,EAvBM,SAAC,GAAa,IACzBC,EADwB,EAAXC,MACKC,KAAI,SAAAC,GACxB,OACI,yBAAKC,IAAKD,EAAKE,GAAIC,UAAU,iCACzB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASC,MAAM,OAAOC,IAAKP,EAAKQ,MAAOC,IAAKT,EAAKU,OACjD,0BAAMP,UAAU,SAASH,EAAKW,OAC9B,kBAACC,EAAA,EAAD,CAAWT,UAAU,aAAaH,EAAKU,MACvC,kBAACG,EAAA,EAAD,CAAUV,UAAU,aAAaH,EAAKc,YAMtD,OACI,yBAAKX,UAAU,aACX,yBAAKA,UAAU,OACbN,KCpBDkB,G,MAAQ,CACjB,CACIb,GAAI,EACJQ,KAAM,kBACNF,MAAO,6BACPG,MAAO,MACPG,MAAO,OAEX,CACIZ,GAAI,EACJQ,KAAM,sBACNF,MAAO,6BACPG,MAAO,GACPG,MAAO,OAEX,CACIZ,GAAI,EACJQ,KAAM,oBACNF,MAAO,6BACPG,MAAO,MACPG,MAAO,QAEX,CACIZ,GAAI,EACJQ,KAAM,qBACNF,MAAO,6BACPG,MAAO,GACPG,MAAO,OAEX,CACIZ,GAAI,EACJQ,KAAM,eACNF,MAAO,6BACPG,MAAO,GACPG,MAAO,QAEX,CACIZ,GAAI,EACJQ,KAAM,mBACNF,MAAO,6BACPG,MAAO,MACPG,MAAO,SCTAE,E,kDAxBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXpB,MAAOiB,GAJQ,E,qDAUjB,OACE,6BACE,kBAACI,EAAA,EAAD,CAAQC,MAAI,EAACC,MAAM,WACjB,yBAAKlB,UAAU,aACb,kBAACmB,EAAA,EAAD,CAAaC,KAAK,KAAlB,WAGJ,kBAAC,EAAD,CAAczB,MAAO0B,KAAKN,MAAMpB,a,GAlBtB2B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6462cf31.chunk.js","sourcesContent":["import React  from 'react';\r\nimport { Card, CardImg,  CardText, CardTitle} from 'reactstrap';\r\n\r\nconst Displayshoes = ({shoes}) => {\r\n    const shoesList = shoes.map(shoe => {\r\n        return(\r\n            <div key={shoe.id} className=\"col-md-4 col-sm-6 col-12 mt-3\">\r\n                <Card>\r\n                    <CardImg width=\"100%\" src={shoe.image} alt={shoe.name} />\r\n                    <span className=\"label\">{shoe.label}</span>\r\n                    <CardTitle className=\"ml-5 text\">{shoe.name}</CardTitle>\r\n                    <CardText className=\"ml-5 text\">{shoe.price}</CardText>\r\n                </Card>\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n            { shoesList }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Displayshoes;","export const SHOES = [\r\n    {\r\n        id: 0,\r\n        name: 'SUPERSTAR SHOES',\r\n        image: './assets/images/shoes1.jpg',\r\n        label: 'NEW',\r\n        price: '$80'\r\n    },\r\n    {\r\n        id: 1,\r\n        name: 'NIZZA TREFOIL SHOES',\r\n        image: './assets/images/shoes2.jpg',\r\n        label: '',\r\n        price: '$65'\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'ZX 2K BOOST SHOES',\r\n        image: './assets/images/shoes3.jpg',\r\n        label: 'NEW',\r\n        price: '$150'\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'BUSENITZ PRO SHOES',\r\n        image: './assets/images/shoes4.jpg',\r\n        label: '',\r\n        price: '$80'\r\n    },\r\n    {\r\n        id: 4,\r\n        name: 'NMD_R1 SHOES',\r\n        image: './assets/images/shoes5.jpg',\r\n        label: '',\r\n        price: '$140'\r\n    },\r\n    {\r\n        id: 5,\r\n        name: 'LITE RACER SHOES',\r\n        image: './assets/images/shoes6.jpg',\r\n        label: 'NEW',\r\n        price: '$65'\r\n    },\r\n];\r\n\r\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport { Navbar, NavbarBrand } from 'reactstrap';\nimport Displayshoes from './components/DisplayShoes';\nimport './App.css';\nimport { SHOES } from './components/shoes';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      shoes: SHOES\n    };\n\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar dark color=\"primary\">\n          <div className=\"container\">\n            <NavbarBrand href=\"/\">Shoes</NavbarBrand>\n          </div>\n        </Navbar>\n        <Displayshoes shoes={this.state.shoes} />\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}